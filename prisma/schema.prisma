generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pulverizacion {
  id              String            @id @unique @default(uuid())
  fecha           DateTime
  detalle_id      String
  detalle         Detalle           @relation(fields: [detalle_id], references: [id], onDelete: Cascade)
  productos       Producto[]        @relation("PulverizacionProductos")
  Aplicacion      Aplicacion[]
  ConsumoProducto ConsumoProducto[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  usuario_id      String
  usuario         Usuario           @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model Detalle {
  id             String          @id @unique @default(uuid())
  campo_id       String          @default("-")
  campo          Campo           @relation(fields: [campo_id], references: [id], onDelete: SetDefault)
  lotes          String[]
  cultivo_id     String          @default("-")
  cultivo        Cultivo         @relation(fields: [cultivo_id], references: [id], onDelete: SetDefault)
  tratamiento_id String          @default("-")
  tratamiento    TipoTratamiento @relation(fields: [tratamiento_id], references: [id], onDelete: SetDefault)
  Pulverizacion  Pulverizacion[]
  observacion    String?
}

enum UNIDAD {
  LITROS
  GRAMOS
  KILOGRAMOS
}

model Producto {
  id              String            @id @unique @default(uuid())
  nombre          String
  unidad          UNIDAD
  cantidad        Float?
  pulverizaciones Pulverizacion[]   @relation("PulverizacionProductos")
  Aplicacion      Aplicacion[]
  ConsumoProducto ConsumoProducto[]
  usuario_id      String
  usuario         Usuario           @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model Aplicacion {
  id               String        @id @unique @default(uuid())
  pulverizacion_id String
  pulveriacion     Pulverizacion @relation(fields: [pulverizacion_id], references: [id], onDelete: Cascade)
  producto_id      String        @default("-")
  producto         Producto      @relation(fields: [producto_id], references: [id], onDelete: SetDefault)
  dosis            Float
}

model ConsumoProducto {
  id               String        @id @unique @default(uuid())
  pulverizacion_id String
  Pulverizacion    Pulverizacion @relation(fields: [pulverizacion_id], references: [id], onDelete: Cascade)
  producto_id      String        @default("-")
  producto         Producto      @relation(fields: [producto_id], references: [id], onDelete: SetDefault)
  valor_teorico    Float
  valor_real       Float?
  valor_devolucion Float?
}

model Campo {
  id         String    @id @unique @default(uuid())
  nombre     String
  Detalle    Detalle[]
  Lote       Lote[]
  usuario_id String
  usuario    Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model Lote {
  id         String       @id @unique @default(uuid())
  hectareas  Float
  nombre     String
  color      String
  campo_id   String
  campo      Campo        @relation(fields: [campo_id], references: [id], onDelete: Cascade)
  Coordinada Coordinada[]
}

model Coordinada {
  id      String @id @unique @default(uuid())
  lat     Float
  lng     Float
  lote_id String
  lote    Lote   @relation(fields: [lote_id], references: [id], onDelete: Cascade)
}

model Cultivo {
  id         String    @id @unique @default(uuid())
  nombre     String
  Detalle    Detalle[]
  usuario_id String
  usuario    Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model TipoTratamiento {
  id         String    @id @unique @default(uuid())
  nombre     String
  Detalle    Detalle[]
  usuario_id String
  usuario    Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

enum USUARIO_ROL {
  ADMIN
  EMPRESA
  INDIVIDUAL
}

model Usuario {
  id              String            @id @unique @default(uuid())
  empresa_id      String?
  nombre_usuario  String            @unique
  email           String            @unique
  contrasena      String
  nombre          String
  apellido        String
  nro_telefono    String
  rol             USUARIO_ROL
  Sesion          Sesion[]
  TipoTratamiento TipoTratamiento[]
  Pulverizacion   Pulverizacion[]
  Producto        Producto[]
  Campo           Campo[]
  Cultivo         Cultivo[]
  Log             Log[]
  Suscripcion     Suscripcion[]
  SuscripcionLog  SuscripcionLog[]
}

model Sesion {
  id            String   @id @unique @default(uuid())
  usuario_id    String
  usuario       Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  access_token  String?  @unique
  refresh_token String?  @unique
  createdAt     DateTime @default(now())
  expireIn      DateTime
  updatedAt     DateTime @updatedAt
}

enum LOG {
  PULVERIZACION
  PRODUCTO
  CULTIVO
  TRATAMIENTO
  UBICACION
  USUARIO
  SUSCRIPCION
}

model Log {
  id          String   @id @unique @default(uuid())
  type        LOG
  description String
  usuario_id  String?
  empresa_id  String?
  usuario     Usuario? @relation(fields: [usuario_id], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
}

model Plan {
  id          String        @id @unique @default(uuid())
  nombre      USUARIO_ROL
  descripcion String[]
  valor       Float
  Suscripcion Suscripcion[]
}

enum STATUS {
  pending
  authorized
  cancelled
}

enum SUBSCRIPTION_MESSAGE {
  welcome
  warning
  cancelled
  disabled
}

model Suscripcion {
  usuario_id   String               @id @unique
  id           String?
  plan_id      String
  plan         Plan                 @relation(fields: [plan_id], references: [id])
  usuario      Usuario              @relation(fields: [usuario_id], references: [id])
  fecha_fin    DateTime
  free_trial   Boolean
  status       STATUS
  message_info SUBSCRIPTION_MESSAGE @default(welcome)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model SuscripcionLog {
  id         String   @id @unique @default(uuid())
  fecha      DateTime
  monto      Float
  usuario_id String
  usuario    Usuario  @relation(fields: [usuario_id], references: [id])
}
